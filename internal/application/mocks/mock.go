// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	entity "cotion/internal/domain/entity"
	multipart "mime/multipart"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	minio "github.com/minio/minio-go/v7"
)

// MockNotesAppManager is a mock of NotesAppManager interface.
type MockNotesAppManager struct {
	ctrl     *gomock.Controller
	recorder *MockNotesAppManagerMockRecorder
}

// MockNotesAppManagerMockRecorder is the mock recorder for MockNotesAppManager.
type MockNotesAppManagerMockRecorder struct {
	mock *MockNotesAppManager
}

// NewMockNotesAppManager creates a new mock instance.
func NewMockNotesAppManager(ctrl *gomock.Controller) *MockNotesAppManager {
	mock := &MockNotesAppManager{ctrl: ctrl}
	mock.recorder = &MockNotesAppManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotesAppManager) EXPECT() *MockNotesAppManagerMockRecorder {
	return m.recorder
}

// AllNotesByUserID mocks base method.
func (m *MockNotesAppManager) AllNotesByUserID(userID string) (entity.ShortNotes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllNotesByUserID", userID)
	ret0, _ := ret[0].(entity.ShortNotes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllNotesByUserID indicates an expected call of AllNotesByUserID.
func (mr *MockNotesAppManagerMockRecorder) AllNotesByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllNotesByUserID", reflect.TypeOf((*MockNotesAppManager)(nil).AllNotesByUserID), userID)
}

// DeleteNote mocks base method.
func (m *MockNotesAppManager) DeleteNote(userID, noteToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", userID, noteToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockNotesAppManagerMockRecorder) DeleteNote(userID, noteToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockNotesAppManager)(nil).DeleteNote), userID, noteToken)
}

// GetNote mocks base method.
func (m *MockNotesAppManager) GetNote(userID, noteToken string) (entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", userID, noteToken)
	ret0, _ := ret[0].(entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockNotesAppManagerMockRecorder) GetNote(userID, noteToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockNotesAppManager)(nil).GetNote), userID, noteToken)
}

// SaveNote mocks base method.
func (m *MockNotesAppManager) SaveNote(userID string, noteRequest entity.NoteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNote", userID, noteRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNote indicates an expected call of SaveNote.
func (mr *MockNotesAppManagerMockRecorder) SaveNote(userID, noteRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNote", reflect.TypeOf((*MockNotesAppManager)(nil).SaveNote), userID, noteRequest)
}

// UpdateNote mocks base method.
func (m *MockNotesAppManager) UpdateNote(userID, noteToken string, noteRequest entity.NoteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", userID, noteToken, noteRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockNotesAppManagerMockRecorder) UpdateNote(userID, noteToken, noteRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockNotesAppManager)(nil).UpdateNote), userID, noteToken, noteRequest)
}

// MockUserAppManager is a mock of UserAppManager interface.
type MockUserAppManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserAppManagerMockRecorder
}

// MockUserAppManagerMockRecorder is the mock recorder for MockUserAppManager.
type MockUserAppManagerMockRecorder struct {
	mock *MockUserAppManager
}

// NewMockUserAppManager creates a new mock instance.
func NewMockUserAppManager(ctrl *gomock.Controller) *MockUserAppManager {
	mock := &MockUserAppManager{ctrl: ctrl}
	mock.recorder = &MockUserAppManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAppManager) EXPECT() *MockUserAppManagerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserAppManager) Delete(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserAppManagerMockRecorder) Delete(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserAppManager)(nil).Delete), userID)
}

// DownloadAvatar mocks base method.
func (m *MockUserAppManager) DownloadAvatar(user entity.User) (*minio.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAvatar", user)
	ret0, _ := ret[0].(*minio.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAvatar indicates an expected call of DownloadAvatar.
func (mr *MockUserAppManagerMockRecorder) DownloadAvatar(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAvatar", reflect.TypeOf((*MockUserAppManager)(nil).DownloadAvatar), user)
}

// Get mocks base method.
func (m *MockUserAppManager) Get(userID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserAppManagerMockRecorder) Get(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserAppManager)(nil).Get), userID)
}

// Save mocks base method.
func (m *MockUserAppManager) Save(registerUser entity.UserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", registerUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserAppManagerMockRecorder) Save(registerUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserAppManager)(nil).Save), registerUser)
}

// Update mocks base method.
func (m *MockUserAppManager) Update(curUser entity.User, user entity.UserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", curUser, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserAppManagerMockRecorder) Update(curUser, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserAppManager)(nil).Update), curUser, user)
}

// UploadAvatar mocks base method.
func (m *MockUserAppManager) UploadAvatar(src multipart.File, hdr *multipart.FileHeader, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", src, hdr, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockUserAppManagerMockRecorder) UploadAvatar(src, hdr, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockUserAppManager)(nil).UploadAvatar), src, hdr, user)
}

// MockAuthAppManager is a mock of AuthAppManager interface.
type MockAuthAppManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuthAppManagerMockRecorder
}

// MockAuthAppManagerMockRecorder is the mock recorder for MockAuthAppManager.
type MockAuthAppManagerMockRecorder struct {
	mock *MockAuthAppManager
}

// NewMockAuthAppManager creates a new mock instance.
func NewMockAuthAppManager(ctrl *gomock.Controller) *MockAuthAppManager {
	mock := &MockAuthAppManager{ctrl: ctrl}
	mock.recorder = &MockAuthAppManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthAppManager) EXPECT() *MockAuthAppManagerMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuthAppManager) Auth(sessionCookie *http.Cookie) (entity.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", sessionCookie)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthAppManagerMockRecorder) Auth(sessionCookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthAppManager)(nil).Auth), sessionCookie)
}

// Login mocks base method.
func (m *MockAuthAppManager) Login(login, password string) (*http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", login, password)
	ret0, _ := ret[0].(*http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthAppManagerMockRecorder) Login(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthAppManager)(nil).Login), login, password)
}

// Logout mocks base method.
func (m *MockAuthAppManager) Logout(sessionCookie *http.Cookie) (*http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", sessionCookie)
	ret0, _ := ret[0].(*http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthAppManagerMockRecorder) Logout(sessionCookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthAppManager)(nil).Logout), sessionCookie)
}
